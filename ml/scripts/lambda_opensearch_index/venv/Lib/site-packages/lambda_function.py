import boto3
from opensearchpy import OpenSearch, RequestsHttpConnection
from opensearchpy.exceptions import AuthorizationException, TransportError
from requests_aws4auth import AWS4Auth
import logging
import json

# === CONFIGURA√á√ïES ===
INDEX_NAME = 'compliance_docs'
REGION = 'us-east-2'
HOST = 'vpc-compliance-opensearch-6pwgiyup25lkp32dorw4hq2n34.us-east-2.es.amazonaws.com'

# === LOGGER ===
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    try:
        # Autentica√ß√£o AWS
        session = boto3.Session()
        credentials = session.get_credentials().get_frozen_credentials()

        awsauth = AWS4Auth(
            credentials.access_key,
            credentials.secret_key,
            REGION,
            'es',
            session_token=credentials.token
        )

        # Cliente OpenSearch
        client = OpenSearch(
            hosts=[{'host': HOST, 'port': 443}],
            http_auth=awsauth,
            use_ssl=True,
            verify_certs=True,
            connection_class=RequestsHttpConnection,
            timeout=30
        )

        # Deletar √≠ndice se existir
        if client.indices.exists(INDEX_NAME):
            logger.info(f"üß® Deletando √≠ndice existente: {INDEX_NAME}")
            client.indices.delete(index=INDEX_NAME)

        # Criar novo √≠ndice com KNN
        logger.info(f"üöÄ Criando √≠ndice: {INDEX_NAME}")
        index_body = {
            "settings": {
                "index": {
                    "number_of_shards": 1,
                    "number_of_replicas": 1,
                    "knn": True
                }
            },
            "mappings": {
                "properties": {
                    "id": {"type": "keyword"},
                    "hash": {"type": "keyword"},
                    "titulo": {"type": "text"},
                    "texto": {"type": "text"},
                    "fonte": {"type": "keyword"},
                    "data_documento": {"type": "date"},
                    "embedding": {
                        "type": "knn_vector",
                        "dimension": 768  # ajuste se for 384
                    }
                }
            }
        }

        response = client.indices.create(index=INDEX_NAME, body=index_body)

        logger.info("‚úÖ √çndice criado com sucesso.")
        return {
            "statusCode": 200,
            "body": json.dumps({
                "message": "√çndice recriado com sucesso.",
                "index": INDEX_NAME,
                "response": response
            })
        }

    except AuthorizationException as ae:
        logger.error(f"üö´ Erro de autoriza√ß√£o: {str(ae)}")
        return {
            "statusCode": 403,
            "body": json.dumps({"error": "Erro de autoriza√ß√£o", "details": str(ae)})
        }
    except TransportError as te:
        logger.error(f"‚ö†Ô∏è Erro de transporte: {str(te)}")
        return {
            "statusCode": 502,
            "body": json.dumps({"error": "Erro de transporte", "details": str(te)})
        }
    except Exception as e:
        logger.error(f"‚ùå Erro inesperado: {str(e)}")
        return {
            "statusCode": 500,
            "body": json.dumps({"error": "Erro inesperado", "details": str(e)})
        }
